# -*- coding: utf-8 -*-
"""t12b-shadi-stats per source again but using l2 data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16GiHxAP6SPxWYCugRVF-cV3EVxU2zdY6

Plotting counts per source
"""

from os.path import join
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
import matplotlib
import datetime as dt



class L4Plots:
  """
  Class that reads csv file from l2/historical and generates plots for l4_plots subdir
  """
  def __init__(self):
    self.dt_now = dt.datetime.now().strftime("%Y%m%d_%H%M%S")


  def read_csv(self, csv_l2_historical):
    df_agg = pd.read_csv(csv_l2_historical)
    df_agg.Date = pd.to_datetime(df_agg.Date)

    # Prep plot by using the selected source per triplet
    #This drops the duplicated datapoints (i.e. if a point comes from owid and we get it too, we shouldn't count our point)
    
    
    # for backward compatiability with l1 data
    df_agg["Location"] = df_agg["CountryProv"]
    
    df_agg3 = df_agg[["Location", "Date", "total_cumul.source"]].copy()
    df_agg3 = df_agg3.groupby(["Date", "total_cumul.source"]).count()
    df_agg3 = df_agg3.unstack("total_cumul.source")
    df_agg3.columns = df_agg3.columns.droplevel()
    
    ## show till date - 1. TODO drop this later
    #df_agg3.reset_index(inplace=True)
    #dt_max = df_agg3.Date.max() - pd.to_timedelta(1,'d')
    #df_agg3 = df_agg3[df_agg3.Date <= dt_max]
    #df_agg3.set_index("Date", inplace=True)
    
    # merge roser and ortiz
    df_agg3["owid/roser"] = df_agg3["owid/roser"].fillna(0) + df_agg3["owid/ortiz"].fillna(0)
    del df_agg3["owid/ortiz"]
    
    df_agg3 = df_agg3[["owid/roser", "covidtracking.com", "wiki", "worldometers", "biominers"]]
    
    df_agg3 = df_agg3.rename(columns={
        "owid/roser": "OWID",
        "covidtracking.com": "CTP",
        "wiki": "Wikipedia",
        "worldometers": "Worldometers",
        "biominers": "LAU manual subset"
    })

    self.df_agg3 = df_agg3


  def prep_plots(self):
    # http://stackoverflow.com/questions/3899980/ddg#3900167
    font = {'family' : 'DejaVu Sans',
            'weight' : 'normal',
            'size'   : 22}
    
    matplotlib.rc('font', **font)


  def plot_line(self, dir_plot_destination):
    # line plot
    df_agg3 = self.df_agg3

    plt.figure(figsize=(15,8))
    filled_markers = ('o', 'v', '^', '<', '>', 's', '8', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X')
    ax=sns.lineplot(data=df_agg3, markers=filled_markers)
    
    # 737530 is for 2020-04-15
    last_date = (df_agg3.index.max() - pd.to_datetime(dt.date(2020,4,15))).days
    extraticks = [737530+last_date]
    plt.xticks(list(plt.xticks()[0]) + extraticks)
    
    ax.set_ylabel("Number of daily country/state pairs")
    plt.xticks(rotation=45)
    plt.grid(alpha=.1)
    plt.ylim(0)
    plt.xlim(right=df_agg3.index.max())
    
    fn_line = join(dir_plot_destination, 't12b-plotSourcesOverTime-lines-v%s.png'%self.dt_now)
    plt.savefig(fn_line, dpi = 300, bbox_inches="tight")


  def plot_stacked(self, dir_plot_destination):
    # https://python-graph-gallery.com/251-stacked-area-chart-with-seaborn-style/
    # stacked area plot
    df_agg3 = self.df_agg3
    
    # Data
    x = df_agg3.index
    y=df_agg3.fillna(0).transpose().values
     
    # Plot
    plt.figure(figsize=(15,8))
    ax = plt.stackplot(x, y, labels=df_agg3.columns)
    plt.xlim(x.min(), x.max())
    plt.legend(loc='upper left')
    plt.ylabel("Countries/states with historical data")
    plt.xlabel("Date")
    
    # Add extra tick for May 3 since the automatic ticks stop at May 1
    #last_date = (df_agg3.index.max() - pd.to_datetime(dt.date(2020,4,15))).days
    ## 737530 represents 04-15
    #extraticks = [737530+last_date] # append last date
    ##extraticks = []
    #existingticks = list(plt.xticks()[0])
    ## drop 2020-05-01 because it's too close to 05-03
    #existingticks = existingticks[0:(len(existingticks)-1)]
    #plt.xticks(existingticks + extraticks)
    
    plt.xticks(rotation=45, ha="right")
    
    plt.grid(alpha=.2)
    
    plt.xlim(right=dt.date(2020,5,1))
    
    # png for doc, and jpg for attachment to submission
    fn_st_png = join(dir_plot_destination, 't12b-plotSourcesOverTime-stacked-v%s.png'%self.dt_now)
    plt.savefig(fn_st_png, dpi = 300, bbox_inches="tight")

    # disabled because it doesn't run on my laptop, but works fine on colab
    #fn_st_jpg = join(dir_plot_destination, 't12b-plotSourcesOverTime-stacked-v%s.jpg'%self.dt_now)
    #plt.savefig(fn_st_jpg, dpi = 300, bbox_inches="tight")
